{
  "openapi": "3.0.0",
  "info": {
    "title": "FoodScan API",
    "version": "1.0.0",
    "description": "API documentation for the FoodScan backend"
  },
  "servers": [
    {
      "url": "http://localhost:5000/api",
      "description": "Local development server"
    },
    {
      "url": "https://foodscan-backend.onrender.com/api",
      "description": "Production server"
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "Endpoints for user registration and authentication"
    },
    {
      "name": "User",
      "description": "Manage user profiles and favorites"
    },
    {
      "name": "Scans",
      "description": "Manage scan actions and favorites"
    },
    {
      "name": "Products",
      "description": "Fetch product details by barcode"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Register a new user",
        "description": "Creates a new user account with a username, email, and password.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": { "type": "string" },
                  "email": { "type": "string", "format": "email" },
                  "password": { "type": "string", "format": "password" }
                },
                "required": ["username", "email", "password"]
              },
              "example": {
                "username": "Rababe",
                "email": "rababe@example.com",
                "password": "StrongPassword123"
              }
            }
          }
        },
        "responses": {
          "201": { "description": "User registered successfully" },
          "400": { "description": "Validation error" }
        }
      }
    },

    "/auth/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Login with email and password",
        "description": "Authenticates a user and returns a JWT token.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string", "format": "email" },
                  "password": { "type": "string", "format": "password" }
                },
                "required": ["email", "password"]
              },
              "example": {
                "email": "admin@gmail.com",
                "password": "admin123"
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Login successful, returns JWT token" },
          "400": { "description": "Invalid credentials" }
        }
      }
    },

    "/auth/google": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Login with Google (Passport.js)",
        "description": "Redirects the user to Google for authentication.",
        "responses": {
          "302": { "description": "Redirect to Google login" }
        }
      }
    },

    "/auth/google/callback": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Google login callback",
        "description": "Handles the response from Google and returns a JWT token on success.",
        "responses": {
          "200": { "description": "Login successful, returns JWT token" },
          "400": { "description": "Login failed" }
        }
      }
    },

    "/auth/facebook": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Login with Facebook (Passport.js)",
        "description": "Redirects the user to Facebook for authentication.",
        "responses": {
          "302": { "description": "Redirect to Facebook login" }
        }
      }
    },

    "/auth/facebook/callback": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Facebook login callback",
        "description": "Handles the response from Facebook and returns a JWT token on success.",
        "responses": {
          "200": { "description": "Login successful, returns JWT token" },
          "400": { "description": "Login failed" }
        }
      }
    },

    "/user/me": {
      "get": {
        "tags": ["User"],
        "summary": "Get authenticated user profile",
        "description": "Returns the profile of the currently logged-in user. Requires a valid JWT token.",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object",
                      "properties": {
                        "_id": { "type": "string" },
                        "name": { "type": "string" },
                        "email": { "type": "string" },
                        "role": { "type": "string" }
                      },
                      "required": ["_id", "name", "email"]
                    }
                  }
                },
                "example": {
                  "user": {
                    "_id": "64fa2e3a0a5f8b0012345678",
                    "name": "Rababe",
                    "email": "rababe@example.com",
                    "role": "user"
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized – missing or invalid token" },
          "404": { "description": "User not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },

    "/user/favorites": {
      "get": {
        "tags": ["User"],
        "summary": "Get user's favorite scans",
        "description": "Retrieves a list of favorite scans for the authenticated user.",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "List of favorite scans retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": { "type": "string" },
                      "productName": { "type": "string" },
                      "barcode": { "type": "string" },
                      "imageUrl": { "type": "string" }
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized – missing or invalid token" },
          "500": { "description": "Internal server error" }
        }
      }
    },

    "/scans/:id/favorite": {
      "patch": {
        "tags": ["Scans"],
        "summary": "Add a scan to favorites",
        "description": "Marks a specific scan as favorite for the authenticated user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "The ID of the scan to be marked as favorite."
          }
        ],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": { "description": "Scan added to favorites successfully" },
          "401": { "description": "Unauthorized – missing or invalid token" },
          "404": { "description": "Scan not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },

    "/products/{barcode}": {
      "get": {
        "tags": ["Products"],
        "summary": "Get product by barcode",
        "description": "Fetches product details by barcode from the database.",
        "parameters": [
          {
            "name": "barcode",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "The product barcode to search for."
          }
        ],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": { "description": "Product found" },
          "404": { "description": "Product not found" },
          "500": { "description": "Internal server error" }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
